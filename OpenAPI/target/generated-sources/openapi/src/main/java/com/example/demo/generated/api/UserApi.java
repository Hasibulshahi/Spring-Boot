/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.demo.generated.api;

import com.example.demo.generated.model.UserRequest;
import com.example.demo.generated.model.UserResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-09-16T15:52:33.735586300+08:00[Asia/Singapore]")
@Validated
@Tag(name = "User", description = "the User API")
public interface UserApi {

    /**
     * POST /api/v1/users : Create a user
     *
     * @param userRequest  (required)
     * @return User created (status code 200)
     */
    @Operation(
        operationId = "createUser",
        summary = "Create a user",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/users",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<UserResponse> createUser(
        @Parameter(name = "UserRequest", description = "", required = true) @Valid @RequestBody UserRequest userRequest
    );


    /**
     * DELETE /api/v1/users/{id} : Delete user
     *
     * @param id  (required)
     * @return User deleted (status code 204)
     */
    @Operation(
        operationId = "deleteUser",
        summary = "Delete user",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "204", description = "User deleted")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/users/{id}"
    )
    
    ResponseEntity<Void> deleteUser(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    );


    /**
     * GET /api/v1/users : Get all users
     *
     * @return List of users (status code 200)
     */
    @Operation(
        operationId = "getAllUser",
        summary = "Get all users",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of users", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = UserResponse.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/users",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<UserResponse>> getAllUser(
        
    );


    /**
     * GET /api/v1/users/{id} : Get user by ID
     *
     * @param id  (required)
     * @return User found (status code 200)
     *         or User not found (status code 404)
     */
    @Operation(
        operationId = "getUserById",
        summary = "Get user by ID",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "User not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/users/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<UserResponse> getUserById(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    );


    /**
     * PUT /api/v1/users/{id} : Update user
     *
     * @param id  (required)
     * @param userRequest  (required)
     * @return User updated (status code 200)
     */
    @Operation(
        operationId = "updateUser",
        summary = "Update user",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User updated", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/users/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<UserResponse> updateUser(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "UserRequest", description = "", required = true) @Valid @RequestBody UserRequest userRequest
    );

}
